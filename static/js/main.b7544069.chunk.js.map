{"version":3,"sources":["Components/Square/index.js","Components/Board/index.js","Components/Function/Convert.js","Components/Game/index.js","index.js"],"names":["Square","value","onClick","bold","className","Board","row","col","squares","renderSquare","i","console","log","renderRow","rowNumber","eachCol","Array","fill","eachRow","renderBoard","Convert","convertIndexToCoordinate","maxRow","maxCol","index","Math","floor","convertCoordinateToIndex","coorDinate","Game","status","size","React","useState","lastStep","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","isAscending","setIsAscending","isWin","setIsWin","boldSquare","setBoldSquare","jumpTo","step","current","winner","calculateWinner","leftSide","rightSide","ifWin","checkWinnerInDirection","j","count","length","currentCoordinate","newCoordinate","currentIndex","historyArray","slice","moves","map","move","desc","newHistory","concat","handleClick","checkedChildren","unCheckedChildren","onChange","checked","reverse","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b7544069.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Square = ({value, onClick, bold}) => {\r\n  if (!bold)\r\n    return (\r\n        <button className=\"square\" onClick={onClick}>\r\n          {value}\r\n        </button>\r\n    );\r\n  else\r\n  return (\r\n    <button className=\"square-bold\" onClick={onClick}>\r\n      {value}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Square","import React from 'react'\r\nimport Square from '../Square';\r\nconst Board = ({row, col, squares, onClick, bold}) => {\r\n    const renderSquare = (i) => {\r\n        console.log(bold[i])\r\n        if (bold[i] == true)\r\n        return (\r\n            <Square\r\n            bold = {true}\r\n            value={squares[i]}\r\n            onClick={() => onClick(i)}\r\n          />\r\n        )\r\n        else \r\n        return (\r\n          <Square\r\n            bold = {false}\r\n            value={squares[i]}\r\n            onClick={() => onClick(i)}\r\n          />\r\n        );\r\n    }\r\n    const renderRow = (rowNumber) => {\r\n        const eachCol = Array(col).fill(null)\r\n        for (let i = 0 ; i < col ; i++){\r\n            eachCol[i] = renderSquare(row * rowNumber + i)\r\n        }\r\n        return eachCol\r\n    }\r\n    const renderBoard = () =>{\r\n        const eachRow = Array(row).fill(null)\r\n        for (let i = 0 ; i < row ; i++){\r\n            eachRow[i] = (\r\n                <div className = \"board-row\">\r\n                    {renderRow(i)}\r\n                </div>\r\n            )\r\n        }\r\n        return eachRow\r\n    }\r\n    return (\r\n        <div>\r\n          {renderBoard()}\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default Board","const convertIndexToCoordinate = (maxRow, maxCol, index) => {\r\n    let col = index % maxCol\r\n    let row = Math.floor(index / maxRow)\r\n    return {row, col}\r\n}\r\nconst convertCoordinateToIndex = (maxRow, maxCol, coorDinate) => {\r\n    return (coorDinate.row * maxCol + coorDinate.col) \r\n}\r\n\r\nlet Convert = {\r\n    convertIndexToCoordinate,\r\n    convertCoordinateToIndex\r\n}\r\nexport default Convert","import React from 'react'\r\nimport '../../index.css'\r\nimport Board from '../Board'\r\nimport { Switch } from 'antd'\r\nimport 'antd/dist/antd.css';\r\nimport Convert from '../Function/Convert';\r\nconst Game = ({size}) =>{\r\n\r\n    let row = size, col = size // board size\r\n\r\n    const [history, setHistory] = React.useState([{squares: Array(row * col).fill(null), lastStep: null}])\r\n    const [stepNumber, setStepNumber] = React.useState(0)\r\n    const [xIsNext, setXIsNext] = React.useState(true)\r\n    const [isAscending, setIsAscending] = React.useState(true)\r\n    const [isWin, setIsWin] = React.useState(false)\r\n    const [boldSquare, setBoldSquare] = React.useState(Array(row * col).fill(false))\r\n\r\n    const handleClick = (i) => {\r\n        const newHistory = history.slice(0, stepNumber + 1);\r\n        const current = newHistory[newHistory.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (isWin || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = xIsNext ? \"X\" : \"O\";\r\n        \r\n        setHistory(newHistory.concat([{squares: squares, lastStep: i}]))\r\n        setStepNumber(newHistory.length)\r\n        setXIsNext(!xIsNext)\r\n        if (calculateWinner(squares, i)) {\r\n            setIsWin(squares[i])\r\n            setBoldSquare(calculateWinner(squares, i).bold)\r\n            return;\r\n        }\r\n        else {\r\n            setBoldSquare(Array(row*col).fill(false))\r\n        }\r\n      }\r\n    \r\n    const jumpTo = (step) => {\r\n        const current = history[step];\r\n        const winner = calculateWinner(current.squares, current.lastStep);\r\n        setStepNumber(step)\r\n        setXIsNext(step % 2 === 0)\r\n        if (winner == null) {\r\n            setIsWin(null)\r\n            setBoldSquare(Array(col*row).fill(false))\r\n        }\r\n        if (winner){\r\n            setIsWin(current.lastStep)\r\n            setBoldSquare(winner.bold)\r\n        }\r\n    }\r\n    const calculateWinner = (squares, i) => {\r\n        var leftSide = {\r\n            row: [-1, -2, -3, -4],\r\n            col: [0, 0, 0, 0]\r\n        }\r\n        var rightSide = {\r\n            row: [1, 2, 3, 4],\r\n            col: [0, 0, 0, 0]\r\n        }\r\n        let ifWin = checkWinnerInDirection(leftSide, rightSide, squares, i)\r\n        if (ifWin != null){\r\n            let winner = ifWin.winner\r\n            let bold = ifWin.bold\r\n            return {winner, bold}\r\n        }\r\n        \r\n        leftSide = {\r\n            row: [0, 0, 0, 0],\r\n            col: [-1, -2, -3, -4]\r\n        }\r\n        rightSide = {\r\n            row: [0, 0, 0, 0],\r\n            col: [1, 2, 3, 4]\r\n        }\r\n\r\n        ifWin = checkWinnerInDirection(leftSide, rightSide, squares, i)\r\n        if (ifWin != null){\r\n            let winner = ifWin.winner\r\n            let bold = ifWin.bold\r\n            return {winner, bold}\r\n        }\r\n        leftSide = {\r\n            row: [-1, -2, -3, -4],\r\n            col: [-1, -2, -3, -4]\r\n        }\r\n        rightSide = {\r\n            row: [1, 2, 3, 4],\r\n            col: [1, 2, 3, 4]\r\n        }\r\n\r\n        ifWin = checkWinnerInDirection(leftSide, rightSide, squares, i)\r\n        if (ifWin != null){\r\n            let winner = ifWin.winner\r\n            let bold = ifWin.bold\r\n            return {winner, bold}\r\n        }\r\n        leftSide = {\r\n            row: [-1, -2, -3, -4],\r\n            col: [1, 2, 3, 4]\r\n        }\r\n        rightSide = {\r\n            row: [1, 2, 3, 4],\r\n            col: [-1, -2, -3, -4]\r\n        }\r\n\r\n        ifWin = checkWinnerInDirection(leftSide, rightSide, squares, i)\r\n        if (ifWin != null){\r\n            let winner = ifWin.winner\r\n            let bold = ifWin.bold\r\n            return {winner, bold}\r\n        }\r\n        return null\r\n    }\r\n    const checkWinnerInDirection = (leftSide, rightSide, squares, j) => {\r\n        let count = 1;\r\n        let bold = Array(col*row).fill(false)\r\n        for (let i = 0 ; i < leftSide.row.length ; i++){\r\n            let currentCoordinate = Convert.convertIndexToCoordinate(row, col, j)\r\n            let newCoordinate = {\r\n                row: currentCoordinate.row + leftSide.row[i],\r\n                col: currentCoordinate.col + leftSide.col[i]\r\n            }\r\n            let currentIndex = Convert.convertCoordinateToIndex(row, col, newCoordinate)\r\n            if (currentIndex >= 0 && currentIndex < row*col){\r\n                if (squares[j] === squares[currentIndex] && squares[j] != null){\r\n                    bold[currentIndex] = true\r\n                    count++\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n                if (count === 5){\r\n                    bold[j] = true\r\n                    let winner = squares[j]\r\n                    return {winner, bold}\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0 ; i < rightSide.row.length ; i++){\r\n            let currentCoordinate = Convert.convertIndexToCoordinate(row, col, j)\r\n            currentCoordinate.row += rightSide.row[i]\r\n            currentCoordinate.col += rightSide.col[i]\r\n            let currentIndex = Convert.convertCoordinateToIndex(row, col, currentCoordinate)\r\n            if (currentIndex > 0 && currentIndex < row*col){\r\n                if (squares[j] === squares[currentIndex]){\r\n                    bold[currentIndex] = true\r\n                    count++\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n                if (count === 5){\r\n                    bold[j] = true\r\n                    let winner = squares[j]\r\n                    return {winner, bold}\r\n                }\r\n            }\r\n        }\r\n        return null\r\n    }\r\n    let historyArray = history.slice();\r\n    \r\n    const current = history[stepNumber];\r\n    const winner = calculateWinner(current.squares, current.lastStep);\r\n    const moves = historyArray.map((step, move) => {\r\n        const desc = move ?\r\n        'Go to move #' + move + ' {'+Convert.convertIndexToCoordinate(row, col, step.lastStep).row + ',' + Convert.convertIndexToCoordinate(row, col, step.lastStep).col +'}' :\r\n        'Go to game start';\r\n        if (move === stepNumber)\r\n        return (\r\n        <li key={move}>\r\n            <button onClick={() => jumpTo(move)} className = \"button-bold\">{desc}</button>\r\n        </li>\r\n        );\r\n        else \r\n        return(\r\n        <li key={move}>\r\n            <button onClick={() => jumpTo(move)} className = \"button\">{desc}</button>\r\n        </li>\r\n        )\r\n    });\r\n    \r\n    let status\r\n    if (winner) {\r\n        status = \"Winner: \" + winner.winner;\r\n    } else {\r\n        status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n    }\r\n    if (stepNumber == col * row){\r\n        status = \"Draw\"\r\n    }\r\n    const onChangeSwitch = (checked) => {\r\n        if (checked){\r\n            setIsAscending(false)\r\n        }\r\n        else {\r\n            setIsAscending(true)\r\n        }\r\n    }\r\n    const renderHistory = () => {\r\n        if (!isAscending){\r\n            return moves.reverse()\r\n        }\r\n        return(\r\n            moves\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"game\">\r\n        <div className=\"game-board\">\r\n            <Board\r\n            row = {row}\r\n            col = {col}\r\n            squares={current.squares}\r\n            onClick={i => handleClick(i)}\r\n            bold = {boldSquare}\r\n            />\r\n        </div>\r\n        <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>\r\n                <Switch checkedChildren = \"DSC\" unCheckedChildren = \"ACS\" onChange = {onChangeSwitch}/>\r\n            </ol>\r\n            <ol>{renderHistory()}</ol>\r\n        </div>\r\n        </div>\r\n    );\r\n    \r\n}\r\nexport default Game","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Components/Game';\n\nReactDOM.render(<Game size = {15}/>, document.getElementById(\"root\"));\n"],"sourceRoot":""}